# This is a basic workflow to help you get started with Actions

name: 'Terraform to S3'

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

        

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4

    # Install the preferred version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"
    

  
      # https://github.com/hashicorp/setup-terraform
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: terraform #add this so it can find terraform files

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color



      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        id: plan
        env:
          AWS_IAM_KEY: ${{ secrets.AWS_IAM_KEY_ID }}
          AWS_AWS_IAM_KEY_ACCESS: ${{ secrets.AWS_IAM_KEY_ACCESS }}
          AWS_S3_REGION: ${{ secrets.AWS_REGION }}
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: terraform #add this so it can find terraform files


      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })




      # # Add a comment to pull requests with plan results
      # - name: add-plan-comment
      #   id: comment
      #   uses: actions/github-script@v3
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
      #       <details><summary>Show Plan</summary>
            
      #       \`\`\`${process.env.PLAN}\`\`\`
            
      #       </details>
            
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      #   # On push to main, build or change infrastructure according to Terraform configuration files
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   env:
      #     AWS_IAM_KEY: ${{ secrets.AWS_IAM_KEY_ID }}
      #     AWS_AWS_IAM_KEY_ACCESS: ${{ secrets.AWS_IAM_KEY_ACCESS }}
      #     AWS_S3_REGION: ${{ secrets.AWS_REGION }}
      #   run: terraform apply -auto-approve
























# # This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# # with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# # `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# # to the "main" branch, `terraform apply` will be executed.
# #
# # Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
# #
# # To use this workflow, you will need to complete the following setup steps.
# #
# # 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
# #   Example `main.tf`:
# #     # The configuration for the `remote` backend.
# #     terraform {
# #       backend "remote" {
# #         # The name of your Terraform Cloud organization.
# #         organization = "example-organization"
# #
# #         # The name of the Terraform Cloud workspace to store Terraform state files in.
# #         workspaces {
# #           name = "example-workspace"
# #         }
# #       }
# #     }
# #
# #     # An example resource that does nothing.
# #     resource "null_resource" "example" {
# #       triggers = {
# #         value = "A example resource that does nothing!"
# #       }
# #     }
# #
# #
# # 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
# #   Documentation:
# #     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
# #     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
# #
# # 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
# #   Example:
# #     - name: Setup Terraform
# #       uses: hashicorp/setup-terraform@v1
# #       with:
# #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

# name: 'Terraform'

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:

# permissions:
#   contents: read

# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init

#     # Checks that all Terraform configuration files adhere to a canonical format
#     - name: Terraform Format
#       run: terraform fmt -check

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       run: terraform plan -input=false

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#       run: terraform apply -auto-approve -input=false
